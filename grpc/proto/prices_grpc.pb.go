// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CryptoPricingServiceClient is the client API for CryptoPricingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoPricingServiceClient interface {
	GetHistoricalPrice(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Pricing, error)
}

type cryptoPricingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoPricingServiceClient(cc grpc.ClientConnInterface) CryptoPricingServiceClient {
	return &cryptoPricingServiceClient{cc}
}

func (c *cryptoPricingServiceClient) GetHistoricalPrice(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*Pricing, error) {
	out := new(Pricing)
	err := c.cc.Invoke(ctx, "/CryptoPricingService.CryptoPricingService/GetHistoricalPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoPricingServiceServer is the server API for CryptoPricingService service.
// All implementations must embed UnimplementedCryptoPricingServiceServer
// for forward compatibility
type CryptoPricingServiceServer interface {
	GetHistoricalPrice(context.Context, *EmptyRequest) (*Pricing, error)
	mustEmbedUnimplementedCryptoPricingServiceServer()
}

// UnimplementedCryptoPricingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCryptoPricingServiceServer struct {
}

func (UnimplementedCryptoPricingServiceServer) GetHistoricalPrice(context.Context, *EmptyRequest) (*Pricing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoricalPrice not implemented")
}
func (UnimplementedCryptoPricingServiceServer) mustEmbedUnimplementedCryptoPricingServiceServer() {}

// UnsafeCryptoPricingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoPricingServiceServer will
// result in compilation errors.
type UnsafeCryptoPricingServiceServer interface {
	mustEmbedUnimplementedCryptoPricingServiceServer()
}

func RegisterCryptoPricingServiceServer(s grpc.ServiceRegistrar, srv CryptoPricingServiceServer) {
	s.RegisterService(&CryptoPricingService_ServiceDesc, srv)
}

func _CryptoPricingService_GetHistoricalPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoPricingServiceServer).GetHistoricalPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CryptoPricingService.CryptoPricingService/GetHistoricalPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoPricingServiceServer).GetHistoricalPrice(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CryptoPricingService_ServiceDesc is the grpc.ServiceDesc for CryptoPricingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoPricingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CryptoPricingService.CryptoPricingService",
	HandlerType: (*CryptoPricingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHistoricalPrice",
			Handler:    _CryptoPricingService_GetHistoricalPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/prices.proto",
}
